// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mysqlx_expect.proto

package mysqlx_expect

/*
Expect operations
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/renthraysk/mysqlx/protobuf/mysqlx"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Open_CtxOperation int32

const (
	// copy the operations from the parent Expect-block
	Open_EXPECT_CTX_COPY_PREV Open_CtxOperation = 0
	// start with a empty set of operations
	Open_EXPECT_CTX_EMPTY Open_CtxOperation = 1
)

var Open_CtxOperation_name = map[int32]string{
	0: "EXPECT_CTX_COPY_PREV",
	1: "EXPECT_CTX_EMPTY",
}
var Open_CtxOperation_value = map[string]int32{
	"EXPECT_CTX_COPY_PREV": 0,
	"EXPECT_CTX_EMPTY":     1,
}

func (x Open_CtxOperation) Enum() *Open_CtxOperation {
	p := new(Open_CtxOperation)
	*p = x
	return p
}
func (x Open_CtxOperation) String() string {
	return proto.EnumName(Open_CtxOperation_name, int32(x))
}
func (x *Open_CtxOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Open_CtxOperation_value, data, "Open_CtxOperation")
	if err != nil {
		return err
	}
	*x = Open_CtxOperation(value)
	return nil
}
func (Open_CtxOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_mysqlx_expect_05dd9738a01988c1, []int{0, 0}
}

type Open_Condition_Key int32

const (
	// Change error propagation behaviour
	Open_Condition_EXPECT_NO_ERROR Open_Condition_Key = 1
	// Check if X Protocol field exists
	Open_Condition_EXPECT_FIELD_EXIST Open_Condition_Key = 2
	// Check if X Protocol support document _id generation
	Open_Condition_EXPECT_DOCID_GENERATED Open_Condition_Key = 3
)

var Open_Condition_Key_name = map[int32]string{
	1: "EXPECT_NO_ERROR",
	2: "EXPECT_FIELD_EXIST",
	3: "EXPECT_DOCID_GENERATED",
}
var Open_Condition_Key_value = map[string]int32{
	"EXPECT_NO_ERROR":        1,
	"EXPECT_FIELD_EXIST":     2,
	"EXPECT_DOCID_GENERATED": 3,
}

func (x Open_Condition_Key) Enum() *Open_Condition_Key {
	p := new(Open_Condition_Key)
	*p = x
	return p
}
func (x Open_Condition_Key) String() string {
	return proto.EnumName(Open_Condition_Key_name, int32(x))
}
func (x *Open_Condition_Key) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Open_Condition_Key_value, data, "Open_Condition_Key")
	if err != nil {
		return err
	}
	*x = Open_Condition_Key(value)
	return nil
}
func (Open_Condition_Key) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_mysqlx_expect_05dd9738a01988c1, []int{0, 0, 0}
}

type Open_Condition_ConditionOperation int32

const (
	// set the condition
	//
	// set, if not set
	// overwrite, if set
	Open_Condition_EXPECT_OP_SET Open_Condition_ConditionOperation = 0
	// unset the condition
	Open_Condition_EXPECT_OP_UNSET Open_Condition_ConditionOperation = 1
)

var Open_Condition_ConditionOperation_name = map[int32]string{
	0: "EXPECT_OP_SET",
	1: "EXPECT_OP_UNSET",
}
var Open_Condition_ConditionOperation_value = map[string]int32{
	"EXPECT_OP_SET":   0,
	"EXPECT_OP_UNSET": 1,
}

func (x Open_Condition_ConditionOperation) Enum() *Open_Condition_ConditionOperation {
	p := new(Open_Condition_ConditionOperation)
	*p = x
	return p
}
func (x Open_Condition_ConditionOperation) String() string {
	return proto.EnumName(Open_Condition_ConditionOperation_name, int32(x))
}
func (x *Open_Condition_ConditionOperation) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Open_Condition_ConditionOperation_value, data, "Open_Condition_ConditionOperation")
	if err != nil {
		return err
	}
	*x = Open_Condition_ConditionOperation(value)
	return nil
}
func (Open_Condition_ConditionOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_mysqlx_expect_05dd9738a01988c1, []int{0, 0, 1}
}

// open an Expect block and set/unset the conditions that have to be fulfilled
//
// if any of the conditions fail, all enclosed messages will fail with
// a Mysqlx.Error message.
//
// :returns: :protobuf:msg:`Mysqlx::Ok` on success, :protobuf:msg:`Mysqlx::Error` on error
//
type Open struct {
	Op                   *Open_CtxOperation `protobuf:"varint,1,opt,name=op,enum=Mysqlx.Expect.Open_CtxOperation,def=0" json:"op,omitempty"`
	Cond                 []*Open_Condition  `protobuf:"bytes,2,rep,name=cond" json:"cond,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Open) Reset()         { *m = Open{} }
func (m *Open) String() string { return proto.CompactTextString(m) }
func (*Open) ProtoMessage()    {}
func (*Open) Descriptor() ([]byte, []int) {
	return fileDescriptor_mysqlx_expect_05dd9738a01988c1, []int{0}
}
func (m *Open) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Open.Unmarshal(m, b)
}
func (m *Open) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Open.Marshal(b, m, deterministic)
}
func (dst *Open) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Open.Merge(dst, src)
}
func (m *Open) XXX_Size() int {
	return xxx_messageInfo_Open.Size(m)
}
func (m *Open) XXX_DiscardUnknown() {
	xxx_messageInfo_Open.DiscardUnknown(m)
}

var xxx_messageInfo_Open proto.InternalMessageInfo

const Default_Open_Op Open_CtxOperation = Open_EXPECT_CTX_COPY_PREV

func (m *Open) GetOp() Open_CtxOperation {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return Default_Open_Op
}

func (m *Open) GetCond() []*Open_Condition {
	if m != nil {
		return m.Cond
	}
	return nil
}

type Open_Condition struct {
	ConditionKey         *uint32                            `protobuf:"varint,1,req,name=condition_key,json=conditionKey" json:"condition_key,omitempty"`
	ConditionValue       []byte                             `protobuf:"bytes,2,opt,name=condition_value,json=conditionValue" json:"condition_value,omitempty"`
	Op                   *Open_Condition_ConditionOperation `protobuf:"varint,3,opt,name=op,enum=Mysqlx.Expect.Open_Condition_ConditionOperation,def=0" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *Open_Condition) Reset()         { *m = Open_Condition{} }
func (m *Open_Condition) String() string { return proto.CompactTextString(m) }
func (*Open_Condition) ProtoMessage()    {}
func (*Open_Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_mysqlx_expect_05dd9738a01988c1, []int{0, 0}
}
func (m *Open_Condition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Open_Condition.Unmarshal(m, b)
}
func (m *Open_Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Open_Condition.Marshal(b, m, deterministic)
}
func (dst *Open_Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Open_Condition.Merge(dst, src)
}
func (m *Open_Condition) XXX_Size() int {
	return xxx_messageInfo_Open_Condition.Size(m)
}
func (m *Open_Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Open_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Open_Condition proto.InternalMessageInfo

const Default_Open_Condition_Op Open_Condition_ConditionOperation = Open_Condition_EXPECT_OP_SET

func (m *Open_Condition) GetConditionKey() uint32 {
	if m != nil && m.ConditionKey != nil {
		return *m.ConditionKey
	}
	return 0
}

func (m *Open_Condition) GetConditionValue() []byte {
	if m != nil {
		return m.ConditionValue
	}
	return nil
}

func (m *Open_Condition) GetOp() Open_Condition_ConditionOperation {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return Default_Open_Condition_Op
}

// close a Expect block
//
// closing a Expect block restores the state of the previous Expect block
// for the following messages
//
// :returns: :protobuf:msg:`Mysqlx::Ok` on success, :protobuf:msg:`Mysqlx::Error` on error
type Close struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Close) Reset()         { *m = Close{} }
func (m *Close) String() string { return proto.CompactTextString(m) }
func (*Close) ProtoMessage()    {}
func (*Close) Descriptor() ([]byte, []int) {
	return fileDescriptor_mysqlx_expect_05dd9738a01988c1, []int{1}
}
func (m *Close) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Close.Unmarshal(m, b)
}
func (m *Close) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Close.Marshal(b, m, deterministic)
}
func (dst *Close) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Close.Merge(dst, src)
}
func (m *Close) XXX_Size() int {
	return xxx_messageInfo_Close.Size(m)
}
func (m *Close) XXX_DiscardUnknown() {
	xxx_messageInfo_Close.DiscardUnknown(m)
}

var xxx_messageInfo_Close proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Open)(nil), "Mysqlx.Expect.Open")
	proto.RegisterType((*Open_Condition)(nil), "Mysqlx.Expect.Open.Condition")
	proto.RegisterType((*Close)(nil), "Mysqlx.Expect.Close")
	proto.RegisterEnum("Mysqlx.Expect.Open_CtxOperation", Open_CtxOperation_name, Open_CtxOperation_value)
	proto.RegisterEnum("Mysqlx.Expect.Open_Condition_Key", Open_Condition_Key_name, Open_Condition_Key_value)
	proto.RegisterEnum("Mysqlx.Expect.Open_Condition_ConditionOperation", Open_Condition_ConditionOperation_name, Open_Condition_ConditionOperation_value)
}

func init() { proto.RegisterFile("mysqlx_expect.proto", fileDescriptor_mysqlx_expect_05dd9738a01988c1) }

var fileDescriptor_mysqlx_expect_05dd9738a01988c1 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4d, 0xef, 0xd2, 0x40,
	0x10, 0xc6, 0xe9, 0x8b, 0x07, 0xc7, 0x16, 0xea, 0x42, 0xb0, 0x90, 0x98, 0x34, 0xf5, 0x60, 0x4f,
	0x1b, 0xe4, 0x48, 0x8c, 0x89, 0xb6, 0x8b, 0x21, 0x4a, 0xb7, 0x59, 0x2a, 0x81, 0xd3, 0x06, 0xcb,
	0x9a, 0xa0, 0xd0, 0xad, 0x50, 0x0c, 0x5c, 0x3d, 0xf9, 0x91, 0xfc, 0x4c, 0x7e, 0x0a, 0xd3, 0x52,
	0x79, 0x89, 0xe4, 0x7f, 0xdb, 0xf9, 0xcd, 0xb3, 0x33, 0xf3, 0x64, 0x06, 0x9a, 0x9b, 0xe3, 0xee,
	0xfb, 0xfa, 0xc0, 0xc5, 0x21, 0x13, 0x49, 0x8e, 0xb3, 0xad, 0xcc, 0x25, 0x32, 0xc7, 0x25, 0xc4,
	0xa4, 0x84, 0x5d, 0xe3, 0xa4, 0x39, 0x25, 0xdd, 0x9f, 0x3a, 0xe8, 0x34, 0x13, 0x29, 0x1a, 0x82,
	0x2a, 0x33, 0x5b, 0x71, 0x14, 0xaf, 0xde, 0x77, 0xf0, 0xcd, 0x17, 0x5c, 0x08, 0xb0, 0x9f, 0x1f,
	0x68, 0x26, 0xb6, 0x8b, 0x7c, 0x25, 0xd3, 0x41, 0x8b, 0xcc, 0x22, 0xe2, 0xc7, 0xdc, 0x8f, 0x67,
	0xdc, 0xa7, 0xd1, 0x9c, 0x47, 0x8c, 0x4c, 0x99, 0x2a, 0x33, 0xf4, 0x0a, 0xf4, 0x44, 0xa6, 0x4b,
	0x5b, 0x75, 0x34, 0xef, 0x49, 0xff, 0xf9, 0xdd, 0x4a, 0x32, 0x5d, 0xae, 0x8a, 0x32, 0xac, 0x94,
	0x76, 0x7f, 0xab, 0xf0, 0xf8, 0xcc, 0xd0, 0x0b, 0x30, 0x93, 0x7f, 0x01, 0xff, 0x26, 0x8e, 0xb6,
	0xe2, 0xa8, 0x9e, 0xc9, 0x8c, 0x33, 0xfc, 0x20, 0x8e, 0xe8, 0x25, 0x34, 0x2e, 0xa2, 0x1f, 0x8b,
	0xf5, 0x5e, 0xd8, 0xaa, 0xa3, 0x78, 0x06, 0xab, 0x9f, 0xf1, 0xb4, 0xa0, 0x88, 0x96, 0xb6, 0xb4,
	0xd2, 0x56, 0xef, 0xc1, 0x61, 0x2e, 0xaf, 0x8b, 0x4d, 0xb3, 0xb2, 0x49, 0x23, 0x3e, 0x21, 0x71,
	0xe1, 0xcf, 0x0d, 0x41, 0x2b, 0x06, 0x68, 0x42, 0xa3, 0xca, 0x85, 0x94, 0x13, 0xc6, 0x28, 0xb3,
	0x14, 0xd4, 0x06, 0x54, 0xc1, 0xe1, 0x88, 0x7c, 0x0c, 0x38, 0x99, 0x8d, 0x26, 0xb1, 0xa5, 0xa2,
	0x2e, 0xb4, 0x2b, 0x1e, 0x50, 0x7f, 0x14, 0xf0, 0xf7, 0x24, 0x24, 0xec, 0x6d, 0x4c, 0x02, 0x4b,
	0x73, 0x5f, 0x03, 0xfa, 0xbf, 0x31, 0x7a, 0x0a, 0xb7, 0xad, 0xad, 0xda, 0x55, 0x47, 0x1a, 0xf1,
	0x4f, 0x61, 0x01, 0x15, 0xf7, 0x0d, 0x18, 0xd7, 0x7b, 0x41, 0x36, 0xdc, 0xdd, 0x8c, 0x55, 0x43,
	0x2d, 0xb0, 0xae, 0x32, 0x64, 0x1c, 0xc5, 0x73, 0x4b, 0x19, 0xe8, 0xbf, 0xfe, 0xf4, 0x6c, 0xd7,
	0x84, 0x47, 0xfe, 0x5a, 0xee, 0x44, 0x19, 0x76, 0xde, 0x75, 0xe0, 0x59, 0x22, 0x37, 0xb8, 0xbc,
	0x13, 0x9c, 0x7c, 0xc5, 0xd5, 0xad, 0x7c, 0xde, 0x7f, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x5d,
	0x00, 0x52, 0xb9, 0x61, 0x02, 0x00, 0x00,
}
